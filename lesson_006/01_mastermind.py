# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from mastermind_engine import guess_number, check_user_number, counting_bulls_and_cows, new_game
from termcolor import cprint


def user_input():
    while True:
        cprint("Введите четырёхзначное число и нажмите Enter. Первая цифра не может быть нулём.", "yellow")
        user_number = input()
        correct, message = check_user_number(user_number)
        if not correct:
            cprint(message, "red")
            print()
            continue
        return user_number


def check_win(number):
    win, bulls_and_cows = counting_bulls_and_cows(number)
    if not win:
        answer = "Быки - " + str(bulls_and_cows["bulls"]) + ", коровы - " + str(bulls_and_cows["cows"]) + "."
        cprint(answer, "yellow")
        print()
        return False
    else:
        cprint("Поздравляем! Вы выиграли!", "magenta")
        print("Ходов сделано:", tries_counter)
        print()
        cprint("Если хотите сыграть ещё раз, введите \"Да\" и нажмите Enter", "green")
        return True


guess_number()
tries_counter = 0
while True:
    user_number = user_input()
    tries_counter += 1
    if check_win(user_number):
        play_again = input().lower()
        if not play_again.startswith("д"):
            cprint("До свидания!", "magenta")
            break
        tries_counter = new_game()
